*Docker Swarm

***lets dig in some more of the Docker Swarm


A Docker Swarm is a group of either physical or virtual machines that are running the Docker application and that have been configured to join together in a cluster. ... The activities of the cluster are controlled by a swarm manager, and machines that have joined the cluster are referred to as nodes.

Docker swarm is a container orchestration application, which helps the user to handle multiple containers that are distributed across multiple host machines.

One of the primary advantages of running a docker swarm is the high degree of availability provided for applications. In a docker swarm, there are typically several worker nodes and at least one manager node that is responsible for handling the worker nodes' resources efficiently and ensuring that the cluster operates efficiently.

Docker Swarm Explained: To contextualise our definition of a Docker swarm, let's first describe some of the more basic concepts associated with containers and the Docker framework.

=Docker= is a software interface that allows software developers to seamlessly incorporate container use into the software development process. Docker is an open source software that is usable for Windows and Mac, making it accessible to developers operating on a range of technologies. The programme serves as a command and control interface between the host operating system and containerized systems.

=Containers:=
The key subject of the docker programme is containers and their use and management in the software development process(just like how you can manage the reouseresavaialbel to you). Containers allow developers to bundle software with all of the code and dependencies(libraries,binaries and frameworks) required for them to work in any computing environment. As a result, when moving containerized applications from one computing environment to another, they run reliably.

=Dockerimage=

An image is a collection of executable files that includes all of the code, libraries, runtime, binaries, and configuration files used to execute an application. A container can be thought of as an image's runtime case.

=Docker file=

The name given to the type of file that specifies the contents of a portable image is Dockerfile. Assume you're writing a programme in the Java programming language. Since your computer does not understand Java, you may need a method to translate your code into machine code. The libraries, configuration files, and programmes used to accomplish this are referred to collectively as the "Java Runtime Environment (JRE)." In Docker, all of these assets would be included in the Dockerfile.


There are two kinds of resources in Docker Swarm: replicated and national.

=Swarm Mode := Swarm mode replicated resources work by defining a set of replica tasks for the swarm manager to delegate to available nodes.

=Global Service Mode := Global services work by scheduling one job to each available node that satisfies the operation restrictions and resource requirements using the swam manager.


=Docker Swarm Node :=

A docker swarm is a collection of physical or virtual machines that operate in a cluster. When a computer enters the cluster, it joins the swarm. The docker swarm mechanism distinguishes three types of nodes, each with a distinct position in the docker swarm ecosystem:

=Manager node :=

Manager nodes primary role is to delegate assignments to worker nodes in the swarm. Manager nodes also assist with some of the managerial activities used to run the swarm. A swarm should have no more than seven boss nodes, according to Docker.

=Leader node :=

When a cluster is formed, the Raft consensus algorithm is used to select one of them to serve as the "leader node." Both swarm control and mission orchestration decisions are made by the leader node. If the leader node becomes inactive due to an interruption or malfunction, the Raft consensus algorithm can be used to elect a new leader node.

=Worker Node :=

Each worker node in a docker swarm with several hosts works by obtaining and executing tasks assigned to it by manager nodes. By default, all manager modes are also worker nodes capable of performing tasks when the resources are available.

=Benefits of the Docker Swarm:=

We're seeing a growing number of developers use the Docker engine and docker swarms to build, update, and run applications more efficiently. And tech behemoths such as Google are embracing container-based methodologies such as docker swarm. Here are three straightforward explanations why Docker Swarms are gaining popularity:

=they are used in Leveraging the Power of Containers=

Docker swarm is common with developers because it completely exploits the architecture advantages provided by containers. Containers allow developers to instal software or utilities in self-contained virtual worlds, a role previously reserved for virtual machines.Containers are proving a more lightweight version of virtual machines, as their architecture allows them to make more efficient use of computing power.

=Docker Swarm Helps in High Service Availability=

One of the primary advantages of docker swarms is that they increase application flexibility by replication. A docker swarm needs a swarm manager to delegate tasks to worker nodes in order to run. Developers ensure that the mechanism can continue to run even though one of the manager nodes fails by adding multiple managers. For each, Docker suggests a limit of seven manager nodes withing a cluster.


=Docker swarm can adequaltely make the load balencers job easier:=

Docker swarm schedules assignments using various methodologies to ensure that adequate services are available for all containers. The swarm manager guarantees that container workloads are delegated to the most suitable host for maximum utilisation by a method known as automatic load balancing.

lets do some commands on the Docker Swarm

if we want to really test the docker swarm and nderstand their commands:

docker swarm COMMAND

Docker CA command is to certify the Docker container:

docker swarm ca

-----BEGIN CERTIFICATE-----
MIIBazCCARCgAwIBAgIUJPzo67QC7g8Ebg2ansjkZ8CbmaswCgYIKoZIzj0EAwIw
EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNTAzMTcxMDAwWhcNMzcwNDI4MTcx
MDAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
A0IABKL6/C0sihYEb935wVPRA8MqzPLn3jzou0OJRXHsCLcVExigrMdgmLCC+Va4
+sJ+SLVO1eQbvLHH8uuDdF/QOU6jQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
Af8EBTADAQH/MB0GA1UdDgQWBBSfUy5bjUnBAx/B0GkOBKp91XvxzjAKBggqhkjO
PQQDAgNJADBGAiEAnbvh0puOS5R/qvy1PMHY1iksYKh2acsGLtL/jAIvO4ACIQCi
lIwQqLkJ48SQqCjG1DBTSBsHmMSRT+6mE2My+Z3GKA==
-----END CERTIFICATE-----


This is a cluster management command, and must be executed on a swarm manager node. To learn about managers and workers, refer to the Swarm mode section in the documentation.

you can also look at the =--rotate== option here

docker swarm ca --rotate

desired root digest: sha256:05da740cf2577a25224c53019e2cce99bcc5ba09664ad6bb2a9425d9ebd1b53e
  rotated TLS certificates:  [=========================>                         ] 1/2 nodes
  rotated CA certificates:   [>                                                  ] 0/2 nodes

-----BEGIN CERTIFICATE-----
MIIBazCCARCgAwIBAgIUFynG04h5Rrl4lKyA4/E65tYKg8IwCgYIKoZIzj0EAwIw
EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNTE2MDAxMDAwWhcNMzcwNTExMDAx
MDAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH
A0IABC2DuNrIETP7C7lfiEPk39tWaaU0I2RumUP4fX4+3m+87j0DU0CsemUaaOG6
+PxHhGu2VXQ4c9pctPHgf7vWeVajQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB
Af8EBTADAQH/MB0GA1UdDgQWBBSEL02z6mCI3SmMDmITMr12qCRY2jAKBggqhkjO
PQQDAgNJADBGAiEA263Eb52+825EeNQZM0AME+aoH1319Zp9/J5ijILW+6ACIQCg
gyg5u9Iliel99l7SuMhNeLkrU7fXs+Of1nTyyM73ig==
-----END CERTIFICATE-----


The command to initialize the container is given here,container are more 

docker swarm --init [OPTIONS]

Initialize a swarm. The docker engine targeted by this command becomes a manager in the newly created single-node swarm.

docker swarm init --advertise-addr 192.168.99.121
Swarm initialized: current node (bvz81updecsj6wjz393c09vti) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join \
    --token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx \
    172.17.0.2:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.

=--data-path-port=

This flag allows you to choose the UDP port number that will be used for data path traffic. The given port number must be between 1024 and 49151. If this flag is not set or is set to 0, the port number 4789 is used by default. The data path port can only be configured when the swarm is first created, and it applies to all nodes that join the swarm.The following example initializes a new Swarm, and configures the data path port to UDP port 7777;

docker swarm init --data-path-port=7777


thus lets talk some really required commands(this might repeat as some commands were reused as we really wanted to get the intruction to the commands that was needed,The above might not help you on getting some commands to the demo thus had to give the above sessional introuction.

=Initilizing the swarm=

docker swarm init --advertise-addr <ip-address>

=List of the services=

docker services ls

=listtask of Services=

docker service ps <name>

=Creating the new service=

Docker service create <name> <image-name>

=Remove Service=

docker service rm <name>

=Scalling service=

docker service scale <name?=5

thus a common command 

The aboe is the service level swarm integratonmthus we need to get to the node level ,thus this programme is no less than an kubernetes cluster that we are trying to work with.

the command to list the number of nodes working

docker node ls

Listing the services in the node

docker node ps

removing the node 

docker node rm<id>
